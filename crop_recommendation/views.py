from django.shortcuts import render
import numpy as np
import pickle
from datetime import datetime
from .models import CropPrediction 
from .forms import CropPredictionForm
from django.contrib.auth.decorators import login_required



# Load pre-trained model and scalers
model = pickle.load(open('model.pkl', 'rb'))
sc = pickle.load(open('standscaler.pkl', 'rb'))
mx = pickle.load(open('minmaxscaler.pkl', 'rb'))

# Crop information dictionary
    
    
crop_info = {
    1: {"name": "ржЪрж╛рж▓", "icon": "ЁЯНЪ", "description": "ржЪрж╛рж▓ ржкрзГржерж┐ржмрзАрж░ ржЕржирзЗржХ ржорж╛ржирзБрж╖рзЗрж░ ржкрзНрж░ржзрж╛ржи ржЦрж╛ржжрзНржпрж╢рж╕рзНржпред"},
    2: {"name": "ржнрзБржЯрзНржЯрж╛", "icon": "ЁЯМ╜", "description": "ржнрзБржЯрзНржЯрж╛ ржЦрж╛ржжрзНржп, ржкрзНрж░рж╛ржгрзА ржЦрж╛ржУржпрж╝рж╛ржирзЛ ржПржмржВ ржмрж╛ржпрж╝рзЛржлрзБржпрж╝рзЗрж▓ ржЙрзОржкрж╛ржжржирзЗрж░ ржЬржирзНржп ржмрзНржпрж╛ржкржХржнрж╛ржмрзЗ ржЪрж╛рж╖ ржХрж░рж╛ рж╣ржпрж╝ред"},
    3: {"name": "рждрзБрж▓рж╛", "icon": "ЁЯз╡", "description": "рждрзБрж▓рж╛ рж╢ржХрзНржд ржлрж╛ржЗржмрж╛рж░рзЗрж░ ржЬржирзНржп ржкрж░рж┐ржЪрж┐ржд ржпрж╛ ржмрзНржпрж╛ржЧ ржПржмржВ рж╣рзЗрж╕рж┐ржпрж╝рж╛ржи ржХрж╛ржкржбрж╝ рждрзИрж░рж┐рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    4: {"name": "ржкрж╛ржЯ", "icon": "ЁЯСХ", "description": "ржкрж╛ржЯ ржПржХржЯрж┐ ржирж░ржо ржлрж╛ржЗржмрж╛рж░ ржпрж╛ ржЯрзЗржХрзНрж╕ржЯрж╛ржЗрж▓ ржПржмржВ ржкрзЛрж╢рж╛ржХ рждрзИрж░рж┐рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    5: {"name": "ржирж╛рж░ржХрзЗрж▓", "icon": "ЁЯее", "description": "ржирж╛рж░ржХрзЗрж▓ ржмрж╣рзБржорзБржЦрзА ржПржмржВ ржЦрж╛ржжрзНржп, ржкрж╛ржирзАржпрж╝ ржУ рждрзЗрж▓ ржЙрзОржкрж╛ржжржирзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    6: {"name": "ржкрзЗржБржкрзЗ", "icon": "ЁЯНИ", "description": "ржкрзЗржБржкрзЗ ржПржХржЯрж┐ ржЙрж╖рзНржгржоржирзНржбрж▓рзАржпрж╝ ржлрж▓ ржпрж╛ ржорж┐рж╖рзНржЯрж┐ рж╕рзНржмрж╛ржж ржПржмржВ рж╕рзНржмрж╛рж╕рзНржерзНржп ржЙржкржХрж╛рж░рж┐рждрж╛рж░ ржЬржирзНржп ржкрж░рж┐ржЪрж┐рждред"},
    7: {"name": "ржХржорж▓рж╛", "icon": "ЁЯНК", "description": "ржХржорж▓рж╛ рж╕рж╛ржЗржЯрзНрж░рж╛рж╕ ржЬрж╛рждрзАржпрж╝ ржлрж▓ ржпрж╛ ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ рж╕ржорзГржжрзНржзред"},
    8: {"name": "ржЖржкрзЗрж▓", "icon": "ЁЯНО", "description": "ржЖржкрзЗрж▓ ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ ржлрж▓ ржпрж╛ рждрж╛рж░ ржЦрж╕ржЦрж╕рзЗ ржЯрзЗржХрзНрж╕ржЪрж╛рж░ ржПржмржВ ржмрж┐ржнрж┐ржирзНржи рж╕рзНржмрж╛ржжрзЗрж░ ржЬржирзНржп ржкрж░рж┐ржЪрж┐рждред"},
    9: {"name": "ржорж┐рж╖рзНржЯрж┐ рждрж░ржорзБржЬ", "icon": "ЁЯНИ", "description": "ржорж┐рж╖рзНржЯрж┐ рждрж░ржорзБржЬ ржПржХржЯрж┐ ржорж┐рж╖рзНржЯрж┐, рж░рж╕рж╛рж▓рзЛ ржлрж▓ ржпрж╛ ржЧрж░ржорзЗрж░ рж╕ржоржпрж╝ ржмрзЗрж╢ ржЬржиржкрзНрж░рж┐ржпрж╝ред"},
    10: {"name": "рждрж░ржорзБржЬ", "icon": "ЁЯНЙ", "description": "рждрж░ржорзБржЬ ржПржХржЯрж┐ рж╕рждрзЗржЬржХрж╛рж░рзА ржлрж▓ ржпрж╛ ржкрж╛ржирж┐рж░ ржкрж░рж┐ржорж╛ржгрзЗ ржмрзЗрж╢ рж╕ржорзГржжрзНржзред"},
    11: {"name": "ржЖржЩрзНржЧрзБрж░", "icon": "ЁЯНЗ", "description": "ржЖржЩрзНржЧрзБрж░ ржЫрзЛржЯ, рж░рж╕рж╛рж▓рзЛ ржлрж▓ ржпрж╛ ржЦрж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп ржПржмржВ ржоржж рждрзИрж░рж┐рж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    12: {"name": "ржЖржо", "icon": "ЁЯен", "description": "ржЖржо ржПржХржЯрж┐ ржЙрж╖рзНржгржоржирзНржбрж▓рзАржпрж╝ ржлрж▓ ржпрж╛ 'ржлрж▓рж░рж╛ржЬ' ржирж╛ржорзЗ ржкрж░рж┐ржЪрж┐ржд, рждрж╛рж░ ржорж┐рж╖рзНржЯрж┐ рж╕рзНржмрж╛ржжрзЗрж░ ржЬржирзНржпред"},
    13: {"name": "ржХрж▓рж╛", "icon": "ЁЯНМ", "description": "ржХрж▓рж╛ ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ рж╕рзНржирзНржпрж╛ржХ ржлрж▓ ржпрж╛ ржкржЯрж╛рж╕рж┐ржпрж╝рж╛ржорзЗ рж╕ржорзГржжрзНржзред"},
    14: {"name": "ржбрж╛рж▓рж┐ржо", "icon": "ЁЯНО", "description": "ржбрж╛рж▓рж┐ржо рждрж╛рж░ рж░рж╕рж╛рж▓рзЛ ржПржмржВ ржЕрзНржпрж╛ржирзНржЯрж┐ржЕржХрзНрж╕рж┐ржбрзЗржирзНржЯрзЗ рж╕ржорзГржжрзНржз ржмрзАржЬрзЗрж░ ржЬржирзНржп ржкрж░рж┐ржЪрж┐рждред"},
    15: {"name": "ржорж╕рзБрж░ ржбрж╛рж▓", "icon": "ЁЯН▓", "description": "ржорж╕рзБрж░ ржбрж╛рж▓ ржПржХржЯрж┐ ржкрзНрж░рзЛржЯрж┐ржи рж╕ржорзГржжрзНржз ржбрж╛рж▓ ржпрж╛ ржмрж┐ржнрж┐ржирзНржи ржЦрж╛ржмрж╛рж░ ржПржмржВ рж╕рзНржпрзБржкрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    16: {"name": "ржорж╛рж╕ржХрж▓рж╛ржЗ ржбрж╛рж▓", "icon": "ЁЯлШ", "description": "ржорж╛рж╕ржХрж▓рж╛ржЗ ржбрж╛рж▓ ржПржХржЯрж┐ ржбрж╛рж▓ ржпрж╛ ржжржХрзНрж╖рж┐ржг ржПрж╢рзАржпрж╝ рж░рж╛ржирзНржирж╛ржпрж╝ ржмрзНржпрж╛ржкржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    17: {"name": "ржорзБржЧ ржбрж╛рж▓", "icon": "ЁЯМ▒", "description": "ржорзБржЧ ржбрж╛рж▓ ржЫрзЛржЯ рж╕ржмрзБржЬ ржбрж╛рж▓ ржпрж╛ рж╕рзНржпрзБржк ржУ рж╕рж╛рж▓рж╛ржжрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ ржПржмржВ ржЕржЩрзНржХрзБрж░рж┐ржд ржЕржмрж╕рзНржерж╛ржпрж╝ржУ ржЦрж╛ржУржпрж╝рж╛ рж╣ржпрж╝ред"},
    18: {"name": "ржорзЛрже ржбрж╛рж▓", "icon": "ЁЯлШ", "description": "ржорзЛрже ржбрж╛рж▓ ржПржХржЯрж┐ ржЦрж░рж╛ рж╕рж╣рж┐рж╖рзНржгрзБ ржбрж╛рж▓ ржпрж╛ ржнрж╛рж░рждрзАржпрж╝ рж░рж╛ржирзНржирж╛ржпрж╝ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    19: {"name": "ржкрж┐ржкржбрж╝рзЗ ржбрж╛рж▓", "icon": "ЁЯМ┐", "description": "ржкрж┐ржкржбрж╝рзЗ ржбрж╛рж▓ ржПржХржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржбрж╛рж▓ ржпрж╛ ржкрзНрж░рзЛржЯрж┐ржи рж╕ржорзГржжрзНржз ржПржмржВ ржЧрж░ржорзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ржпрж╝ ржнрж╛рж▓рзЛ ржЬржирзНржорзЗред"},
    20: {"name": "ржХрж┐ржбржирж┐ ржбрж╛рж▓", "icon": "ЁЯлШ", "description": "ржХрж┐ржбржирж┐ ржбрж╛рж▓ ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ ржбрж╛рж▓ ржпрж╛ ржЪрж┐рж▓рж┐ ржПржмржВ рж╕рж┐ржжрзНржз ржХрж░рж╛ ржЦрж╛ржмрж╛рж░ рждрзИрж░рж┐рждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ред"},
    21: {"name": "ржЪрж╛ржирж╛ ржбрж╛рж▓", "icon": "ЁЯеЩ", "description": "ржЪрж╛ржирж╛ ржбрж╛рж▓ ржПржХржЯрж┐ ржмрж╣рзБржорзБржЦрзА ржбрж╛рж▓ ржпрж╛ рж╣рзБржорж╛рж╕ ржУ рждрж░ржХрж╛рж░рж┐рж░ ржорждрзЛ ржмрж┐ржнрж┐ржирзНржи ржЦрж╛ржмрж╛рж░рзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред"},
    22: {"name": "ржХржлрж┐", "icon": "тШХ", "description": "ржХржлрж┐ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржмрж╛ржгрж┐ржЬрзНржпрж┐ржХ ржлрж╕рж▓, ржпрж╛ ржПржХржЯрж┐ ржЬржиржкрзНрж░рж┐ржпрж╝ ржкрж╛ржирзАржпрж╝ рж╣рж┐рж╕рзЗржмрзЗ ржмрж┐рж╢рзНржмржмрзНржпрж╛ржкрзА ржкрж░рж┐ржЪрж┐рждред"}
}

def index(request):
    current_time_date = datetime.now()
    products = CropPrediction.objects.all()
    count = products.count()
    products = CropPrediction.objects.all().order_by('-timestamp')[:30]
    context = {
        'current_time_date': current_time_date,
        'products': products,
        'count': count,
    }
    print(count)
    return render(request, "index.html", context)

@login_required
def predict(request):
    current_time_date = datetime.now()
    form = CropPredictionForm(request.POST or None)
    
    if request.method == 'POST' and form.is_valid():
        # Extract data from form
        N = form.cleaned_data['nitrogen']
        P = form.cleaned_data['phosphorus']
        K = form.cleaned_data['potassium']
        temp = form.cleaned_data['temperature']
        humidity = form.cleaned_data['humidity']
        ph = form.cleaned_data['ph']
        rainfall = form.cleaned_data['rainfall']
        
        # Prepare and scale features for prediction
        feature_list = [N, P, K, temp, humidity, ph, rainfall]
        single_pred = np.array(feature_list).reshape(1, -1)
        
        # Apply MinMaxScaler and StandardScaler
        mx_features = mx.transform(single_pred)
        sc_mx_features = sc.transform(mx_features)
        
        # Predict crop
        prediction = model.predict(sc_mx_features)
        crop = crop_info.get(prediction[0], {"name": "Unknown crop", "icon": "тЭУ", "description": "No description available."})
        
        # Save prediction to database
        CropPrediction.objects.create(
            nitrogen=N, 
            phosphorus=P, 
            potassium=K, 
            temperature=temp, 
            humidity=humidity, 
            ph=ph, 
            rainfall=rainfall, 
            predicted_crop=crop['name']
        )
        
        # Render the result
        return render(request, 'predict.html', {
            'result': crop['name'],
            'icon': crop['icon'],
            'description': crop['description'],
            'current_time_date': current_time_date
        })
    
    return render(request, 'predict.html', {'form': form, 'current_time_date': current_time_date})

    
    
    
@login_required
def profile(request):
    return render(request, 'profile.html')   
    
    
    
    
    
#     crop_info = {
#     1: {"name": "Rice", "icon": "ЁЯНЪ", "description": "Rice is a staple food crop for a large part of the world's population."},
#     2: {"name": "Maize", "icon": "ЁЯМ╜", "description": "Maize is widely grown for food, animal feed, and biofuel production."},
#     3: {"name": "Jute", "icon": "ЁЯз╡", "description": "Jute is known for its strong fibers used in making burlap and hessian cloth."},
#     4: {"name": "Cotton", "icon": "ЁЯСХ", "description": "Cotton is a soft fiber used in the production of textiles and clothing."},
#     5: {"name": "Coconut", "icon": "ЁЯее", "description": "Coconuts are versatile and used in food, drink, and oil production."},
#     6: {"name": "Papaya", "icon": "ЁЯНИ", "description": "Papaya is a tropical fruit known for its sweet taste and health benefits."},
#     7: {"name": "Orange", "icon": "ЁЯНК", "description": "Oranges are citrus fruits popular for their vitamin C content."},
#     8: {"name": "Apple", "icon": "ЁЯНО", "description": "Apples are a popular fruit known for their crisp texture and variety of flavors."},
#     9: {"name": "Muskmelon", "icon": "ЁЯНИ", "description": "Muskmelon is a sweet, juicy fruit often enjoyed in summer."},
#     10: {"name": "Watermelon", "icon": "ЁЯНЙ", "description": "Watermelon is a refreshing fruit high in water content."},
#     11: {"name": "Grapes", "icon": "ЁЯНЗ", "description": "Grapes are small, juicy fruits used for snacking and making wine."},
#     12: {"name": "Mango", "icon": "ЁЯен", "description": "Mango is a tropical fruit known as the 'king of fruits' for its sweet flavor."},
#     13: {"name": "Banana", "icon": "ЁЯНМ", "description": "Bananas are a convenient snack fruit rich in potassium."},
#     14: {"name": "Pomegranate", "icon": "ЁЯНО", "description": "Pomegranates are known for their juicy, antioxidant-rich seeds."},
#     15: {"name": "Lentil", "icon": "ЁЯН▓", "description": "Lentils are a protein-rich legume used in various dishes and soups."},
#     16: {"name": "Blackgram", "icon": "ЁЯлШ", "description": "Blackgram is a legume commonly used in South Asian cuisine."},
#     17: {"name": "Mungbean", "icon": "ЁЯМ▒", "description": "Mungbeans are small green beans often used in soups and sprouted salads."},
#     18: {"name": "Mothbeans", "icon": "ЁЯлШ", "description": "Mothbeans are drought-resistant legumes used in Indian dishes."},
#     19: {"name": "Pigeonpeas", "icon": "ЁЯМ┐", "description": "Pigeonpeas are a common legume grown for their protein content."},
#     20: {"name": "Kidneybeans", "icon": "ЁЯлШ", "description": "Kidneybeans are a popular legume used in chili and stews."},
#     21: {"name": "Chickpea", "icon": "ЁЯеЩ", "description": "Chickpeas are versatile legumes used in dishes like hummus and curry."},
#     22: {"name": "Coffee", "icon": "тШХ", "description": "Coffee is an important cash crop, known for producing a popular beverage."}
# }
